apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: app-3
  namespace: retail-store
  labels:
    app: app-3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-3
  template:
    metadata:
      annotations:
        #sidecar.istio.io/rewriteAppHTTPProbers: "false"
        # wait for the sidecar to start, then start the main application, this is very important in case we want to connect to an external DB using Envoy Proxy
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
        # This tells the side-car proxy to allow any traffic on the specified port to access the service directly.
        #traffic.sidecar.istio.io/excludeOutboundPorts: "3306"
      labels:
        app: app-3
        db: rds
        auth: custom
        version: safe
    spec:
      serviceAccountName: app-3
      containers:
        - image: thejoud1997/app-3:latest
          name: app-3
          ports:
            - containerPort: 3000
          env:
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: k8s-secret
                  key: DB_HOST
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: k8s-secret
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: catalog-sealed-db
                  key: password
            - name: DB_SEALED_USERNAME
              valueFrom:
                secretKeyRef:
                  name: catalog-sealed-db
                  key: username
          volumeMounts:
            - name: app-3-secret
              readOnly: true
              mountPath: /mnt/domino-api-secrets
      volumes:
        - name: app-3-secret
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "aws-secrets"
  analysis:
    successfulRunHistoryLimit: 3
    unsuccessfulRunHistoryLimit: 3
  rollbackWindow:
    revisions: 3
  strategy:
    # when working with blue/green deployment we need to have two services, one active and one as preview this will allow ArgoRollout to perform a blue/green deployment
    blueGreen:
      activeService: app-3-active # <- matches Active Service metadata
      previewService: app-3-preview # <- matches Preview Service metadata

      # prePromotionAnalysis:
      #   templates:
      #     - templateName: pre-promotion-analysis
      #   args:
      #     - name: rollout-app-3-preview

      # postPromotionAnalysis:
      #   templates:
      #     - templateName: post-promotion-analysis

      # number of replicas to keep for preview
      previewReplicaCount: 2

      # autoPromotionEnabled disables automated promotion of the new stack by pausing the rollout
      # immediately before the promotion. If omitted, the default behavior is to promote the new
      # stack as soon as the ReplicaSet are completely ready/available.
      # Rollouts can be resumed using: `kubectl argo rollouts promote ROLLOUT`
      autoPromotionEnabled: true
      #  The AutoPromotionSeconds will make the rollout automatically promote the new ReplicaSet to active Service after the AutoPromotionSeconds time
      # has passed since the rollout has entered a paused state.
      # If the AutoPromotionEnabled field is set to false, this field will be ignored
      autoPromotionSeconds: 1
      scaleDownDelaySeconds: 30

      # 0 means not to scale down
      abortScaleDownDelaySeconds: 30
