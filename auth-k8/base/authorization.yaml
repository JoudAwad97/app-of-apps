# RequestAuthentication provides a way of setting up JWT providers that we can use for authentication
# this will allow us to specify what are the 3rd party libraries we want to use to handle the auth
# this example will use firebase as an issuer so "istio" can use it to validate the authentication
# ---
# Because the "RequestAuthentication" is defined in the namespace "retail-store" it will only apply those providers to this namespace only
# if we want to make this a global option among all the other namespaces we would use the namespace "istio-system"
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: firebase-auth
spec:
  # Which Pods will have this "RequestAuthorization" applied to it
  selector:
    matchLabels:
      app: istio-ingressgateway # to enforce this on all the request coming use "app: istio-ingressgateway"
  jwtRules:
    # Firebase auth initialization
    - issuer: "https://securetoken.google.com/f2-dev-91107" # "f2-dev-91107" is the project id
      jwksUri:
        "https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com"
        # This field specifies the header name to output a successfully verified JWT payload to the backend. The forwarded data is base64_encoded(jwt_payload_in_JSON). If it is not specified, the payload will not be emitted.
      outputPayloadToHeader: "x-auth"
      # If set to true, the original token will be kept for the upstream request. Default is false.
      forwardOriginalToken: true
      # This field specifies a list of operations to copy the claim to HTTP headers on a successfully verified token. This differs from the output_payload_to_header by allowing outputting individual claims instead of the whole payload. The header specified in each operation in the list must be unique. Nested claims of type string/int/bool is supported as well.
      outputClaimToHeaders:
        # name of the header to send to the original service
        - header: x-auth-email
          # name of the claim in the decoded jwt (firebase)
          claim: email
        - header: x-auth-email-verified
          claim: email_verified
        - header: x-auth-identities
          claim: firebase.identities.email
        - header: x-auth-user-id
          claim: user_id
---
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-auth-view
  namespace: istio-ingress
spec:
  # Which Pods will have this "AuthorizationPolicy" applied to it
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: ALLOW
  rules:
    - from:
        - source:
            requestPrincipals: ["*"]
    - to:
        - operation:
            paths: ["/auth/*"]
---
# Enforce that all incoming requests to your service have a valid JWT
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: require-jwt
spec:
  # Which Pods will have this "AuthorizationPolicy" applied to it
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: ALLOW
  rules:
    - from:
        - source:
            requestPrincipals: ["*"]
            # add conditions on the claims outlined from the JWT
      when:
        - key: request.auth.claims[email]
          values: ["thejoud001@gmail.com"]
