# RequestAuthentication provides a way of setting up JWT providers that we can use for authentication
# this will allow us to specify what are the 3rd party libraries we want to use to handle the auth
# this example will use firebase as an issuer so "istio" can use it to validate the authentication, no code is needed from our side
# ---
# Because the "RequestAuthentication" is defined in the namespace "retail-store" it will only apply those providers to this namespace only
# if we want to make this a global option among all the other namespaces we would use the namespace "istio-system"
# this namespace is extended from the namespace in the "kustomization.yaml" of this app
# ---
# IMPORTANT: by default when we setup this "RequestAuthentication" it get applied to all the routes by default, so now any URL we want to access through
# the "app: istio-ingressgateway" will need to authenticate through this provided
# to avoid some specific URLs from authentication we can use "AuthorizationPolicy"
apiVersion: security.istio.io/v1beta1
kind: RequestAuthentication
metadata:
  name: firebase-auth
spec:
  # Which Pods will have this "RequestAuthorization" applied to it
  selector:
    matchLabels:
      app: istio-ingressgateway # to enforce this on all the request coming use "app: istio-ingressgateway"
  jwtRules:
    # Firebase auth initialization
    - issuer: "https://securetoken.google.com/f2-dev-91107" # "f2-dev-91107" is the project id
      jwksUri:
        "https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com"
        # This field specifies the header name to output a successfully verified JWT payload to the backend. The forwarded data is base64_encoded(jwt_payload_in_JSON). If it is not specified, the payload will not be emitted.
      outputPayloadToHeader: "x-auth"
      # If set to true, the original token will be kept for the upstream request. Default is false.
      forwardOriginalToken: true
      # This field specifies a list of operations to copy the claim to HTTP headers on a successfully verified token. This differs from the output_payload_to_header by allowing outputting individual claims instead of the whole payload. The header specified in each operation in the list must be unique. Nested claims of type string/int/bool is supported as well.
      outputClaimToHeaders:
        # name of the header to send to the original service
        - header: x-auth-email
          # name of the claim in the decoded jwt (firebase)
          claim: email
        - header: x-auth-email-verified
          claim: email_verified
        - header: x-auth-identities
          claim: firebase.identities.email
        - header: x-auth-user-id
          claim: user_id
---
# AuthorizationPolicy is used to define specific rules against the "RequestAuthentication", we can either:
# 1. require specific matching of the JWT payload
# 2. allow for some URLs to be access without a JWT token
# in this block we use it to allow some URLs like "/" and "/auth/*" to be accessed without the JWT token
apiVersion: security.istio.io/v1beta1
kind: AuthorizationPolicy
metadata:
  name: allow-auth-view
  namespace: istio-system
spec:
  # Which Pods will have this "AuthorizationPolicy" applied to it
  selector:
    matchLabels:
      app: istio-ingressgateway
  action: ALLOW
  rules:
    - from:
        - source:
            requestPrincipals: ["*"]
    - to:
        - operation:
            paths: ["/", "/auth/*"]
# ---
# Enforce that all incoming requests to your service have a token with a claim (field) in it with a value "thejoud001@gmail.com"
# apiVersion: security.istio.io/v1beta1
# kind: AuthorizationPolicy
# metadata:
#   name: require-jwt
# spec:
#   # Which Pods will have this "AuthorizationPolicy" applied to it
#   selector:
#     matchLabels:
#       app: istio-ingressgateway
#   action: ALLOW
#   rules:
#     - from:
#         - source:
#             requestPrincipals: ["*"]
#             # add conditions on the claims outlined from the JWT
#       when:
#         - key: request.auth.claims[email]
#           values: ["thejoud001@gmail.com"]
