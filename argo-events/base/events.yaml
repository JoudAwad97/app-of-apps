# create a serviceAccount for the "Sensor" to give it the required permissions to invoke and perform it is required job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: operate-workflow-sa
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::443338647997:role/DEV-INVOKE-LAMBDA"
---
# Bind the service account with the following permissions
# Similarly you can use a ClusterRole and ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: operate-workflow-role
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: operate-workflow-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: operate-workflow-role
subjects:
  - kind: ServiceAccount
    name: operate-workflow-sa
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: webhook
spec:
  service:
    ports:
      - port: 12000
        targetPort: 12000
  webhook:
    # event-source can run multiple HTTP servers. Simply define a unique port to start a new HTTP server
    # name of the webhook, this can be a list of items
    example:
      # port to run HTTP server on
      port: "12000"
      # endpoint to listen to
      endpoint: /example
      # HTTP request method to allow. In this case, only POST requests are accepted
      method: POST
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook
spec:
  # this is very critical to the Sensor to be able to perform it is required job like invoking a lambda, Pods, Deployments, etc...
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: test-dep
      # the name of the "EventSource"
      eventSourceName: webhook
      # name of the webhook object in the "EventSource"
      eventName: example
  triggers:
    ######################################################
    ###              Invoke A Pod/Deployment           ###
    ######################################################
    - template:
        name: webhook-pod-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: v1
              kind: Pod
              metadata:
                generateName: hello-world-
              spec:
                containers:
                  - name: hello-container
                    args:
                      - "hello-world"
                    command:
                      - cowsay
                    image: "docker/whalesay:latest"
          parameters:
            - src:
                dependencyName: test-dep
              dest: spec.containers.0.args.0
    - template:
        ######################################################
        ###              Invoke A Lambda                   ###
        ######################################################
        name: lambda-trigger
        awsLambda:
          functionName: test
          region: us-east-2
          payload:
            - src:
                dependencyName: test-dep
                dataKey: body.name
              dest: name

          # Optional, possible values: RequestResponse, Event and DryRun
          # Defaults to RequestResponse, which means invoke the function synchronously.
          invocationType: Event

          # Optional, use if your IAM user/role should assume another role to
          # perform this action
          roleARN: arn:aws:iam::443338647997:role/DEV-INVOKE-LAMBDA
