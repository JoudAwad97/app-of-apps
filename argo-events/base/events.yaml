# create a serviceAccount for the "Sensor" to give it the required permissions to invoke and perform it is required job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: operate-workflow-sa
---
# Bind the service account with the following permissions
# Similarly you can use a ClusterRole and ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: operate-workflow-role
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - create
  - apiGroups:
      - apps
    resources:
      - deployments
    verbs:
      - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: operate-workflow-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: operate-workflow-role
subjects:
  - kind: ServiceAccount
    name: operate-workflow-sa
---
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: webhook
spec:
  # If we want to expose this webhook to an endpoint using ALB
  # we have to disable the service part of it (this part is only for testing purposes)
  # also we will need to generate a service and point it to the "event-source", and then use either "ingress/istio virtual service"
  # to expose this endpoint to public internet
  # service:
  #   ports:
  #     - port: 12000
  #       targetPort: 12000
  webhook:
    # event-source can run multiple HTTP servers. Simply define a unique port to start a new HTTP server
    # name of the webhook, this can be a list of items
    example:
      # port to run HTTP server on
      port: "12000"
      # endpoint to listen to
      endpoint: /webhook
      # HTTP request method to allow. In this case, only POST requests are accepted
      method: POST
---
apiVersion: v1
kind: Service
metadata:
  name: webhook-eventsource
spec:
  ports:
    - port: 12000
      protocol: TCP
      name: tcp
      targetPort: 12000
  selector:
    eventsource-name: webhook
  type: ClusterIP
---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: webhook
spec:
  # this is very critical to the Sensor to be able to perform it is required job like invoking a lambda, Pods, Deployments, etc...
  template:
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: test-dep
      # the name of the "EventSource"
      eventSourceName: webhook
      # name of the webhook object in the "EventSource"
      eventName: example
  triggers:
    ######################################################
    ###              Invoke A Pod/Deployment           ###
    ######################################################
    - template:
        name: webhook-pod-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: v1
              kind: Pod
              metadata:
                generateName: hello-world-
              spec:
                containers:
                  - name: hello-container
                    args:
                      - "hello-world"
                    command:
                      - cowsay
                    image: "docker/whalesay:latest"
          parameters:
            - src:
                dependencyName: test-dep
              dest: spec.containers.0.args.0
    - template:
        ######################################################
        ###              Invoke A Lambda                   ###
        ######################################################
        name: lambda-trigger
        awsLambda:
          functionName: test
          region: us-east-2
          # It's used to extract information from the incoming event and map it to the trigger payload.
          # When an event is received by the sensor, the event payload (which is essentially the data associated with the event)
          # can be parsed and customized before sending it to the trigger. This is done using the payload field.
          # For example, here the payload section is extracting the body.message value from the incoming event (which has a dependency name test-dep)
          # and maps it to a field named message. This customized payload will be passed to the lambda function.
          payload:
            - src:
                # dependencyName = the source of the data, in this case it comes from the "dependencies" section
                dependencyName: test-dep
                dataKey: body.name
              # Defines the destination or the name of the parameter/payload in the trigger.
              # This tells the sensor how the extracted data should be labeled or where it should be placed when invoking the trigger.
              dest: name

          # Parameters allow you to modify the attributes of the trigger itself dynamically based on the incoming event.
          # For example, in the provided lambda function, the parameters section is extracting the body.function_name value from the incoming event (with the same dependency name test-dep)
          # and maps it to functionName. This means, based on the incoming event, the AWS Lambda function name can be dynamically set.
          # If an event comes in with body.function_name set to "my-function", then the lambda named "my-function" will be invoked.
          # parameters:
          #   - src:
          #       dependencyName: test-dep
          #       dataKey: body.function_name
          #     dest: functionName

          # Optional, possible values: RequestResponse, Event and DryRun
          # Defaults to RequestResponse, which means invoke the function synchronously.
          invocationType: Event

          # Optional, use if your IAM user/role should assume another role to
          # perform this action
          roleARN: arn:aws:iam::443338647997:role/DEV-LAMBDA-INVOKER-ROLE
